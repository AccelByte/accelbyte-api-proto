// Copyright (c) 2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// source: Reporting/AsyncAPI/reporting.yaml (0.1.0)

syntax = "proto3";

package accelbyte.reporting.reporting.v1;
// Version v1.0.0

// --- imports ---

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

// --- options ---

option csharp_namespace = "AccelByte.Reporting.Reporting";
option go_package = "accelbyte.net/reporting/reporting";
option java_multiple_files = true;
option java_package = "net.accelbyte.reporting.reporting";

// --- schema objects ---

// path: #/components/schemas/event
message Event {
    string id = 1;
    int64 version = 2;
    string name = 3;
    string namespace = 4;
    string parentNamespace = 5;
    string timestamp = 6;
    string clientId = 7;
    string userId = 8;
    string traceId = 9;
    string sessionId = 10;
}

// path: #/components/schemas/autoHideContent
message AutoHideContent {
    string namespace = 1;
    string userId = 2;
    string contentId = 3;
}

// path: #/components/schemas/reportContent
message ReportContent {
    string category = 1;
    string comment = 2;
    string createdAt = 3;
    string extensionCategory = 4;
    string id = 5;
    string namespace = 6;
    string objectID = 7;
    string objectType = 8;
    string reason = 9;
    string reporterID = 10;
    string ticketID = 11;
    string updatedAt = 12;
    string userID = 13;
}

// path: #/components/messages/hideContent/payload/properties/payload
message AnonymousSchema1 {
    AutoHideContent autoHideContent = 1;
}

// path: #/components/messages/hideContent/payload
message HideContent {
    AnonymousSchema1 payload = 1;

    // allOf(#/components/schemas/event)
    string id = 2;
    int64 version = 3;
    string name = 4;
    string namespace = 5;
    string parentNamespace = 6;
    string timestamp = 7;
    string clientId = 8;
    string userId = 9;
    string traceId = 10;
    string sessionId = 11;
}

// path: #/components/messages/userReport/payload
message UserReport {
    ReportContent payload = 1;

    // allOf(#/components/schemas/event)
    string id = 2;
    int64 version = 3;
    string name = 4;
    string namespace = 5;
    string parentNamespace = 6;
    string timestamp = 7;
    string clientId = 8;
    string userId = 9;
    string traceId = 10;
    string sessionId = 11;
}

// path: #/components/messages/adminReport/payload
message AdminReport {
    ReportContent payload = 1;

    // allOf(#/components/schemas/event)
    string id = 2;
    int64 version = 3;
    string name = 4;
    string namespace = 5;
    string parentNamespace = 6;
    string timestamp = 7;
    string clientId = 8;
    string userId = 9;
    string traceId = 10;
    string sessionId = 11;
}


// --- #/components/messages/{message_name} ---

// path: #/components/messages/hideContent
message HideContentMessage {
    HideContent payload = 1;
}

// path: #/components/messages/userReport
message UserReportMessage {
    UserReport payload = 1;
}

// path: #/components/messages/adminReport
message AdminReportMessage {
    AdminReport payload = 1;
}


// --- #/channels/{channel_name}/{operation_type}/message ---

// path: #/channels/report/publish/message
message ReportPublish {
    oneof payload {
        UserReportMessage variant0 = 1;
        AdminReportMessage variant1 = 2;
    }
}


// --- service ---


// Publishes a message to the Auto Moderation channel. (autoModeration HideContent)
service AutoModerationHideContentService {
    rpc OnMessage(HideContent) returns (google.protobuf.Empty);
}

// Publishes a UserReport to the Report channel. (oneOf variant) (report UserReport)
service ReportUserReportService {
    rpc OnMessage(UserReport) returns (google.protobuf.Empty);
}

// Publishes a AdminReport to the Report channel. (oneOf variant) (report AdminReport)
service ReportAdminReportService {
    rpc OnMessage(AdminReport) returns (google.protobuf.Empty);
}