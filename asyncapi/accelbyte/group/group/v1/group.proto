// Copyright (c) 2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// source: Group/AsyncAPI/group.yaml (1.0.0)
// git-hash: 93f80da7cd88a4c8ef6e1a02666d4e5b25f46fa1

syntax = "proto3";

package accelbyte.group.group.v1;
// Version v1.0.0

// --- imports ---

import "google/protobuf/empty.proto";


// --- options ---

option csharp_namespace = "AccelByte.Group.Group";
option go_package = "accelbyte.net/group/group";
option java_multiple_files = true;
option java_package = "net.accelbyte.group.group";

// --- schema objects ---

// path: #/components/schemas/groupMemberInvitedPayload
message GroupMemberInvitedPayload {
    string namespace = 1;
    string groupId = 2;
    string groupName = 3;
    string requesterUserId = 4;
    string invitedUserId = 5;
}

// path: #/components/schemas/groupMemberJoinRequestedPayload
message GroupMemberJoinRequestedPayload {
    string namespace = 1;
    string groupId = 2;
    string groupName = 3;
    repeated string adminIds = 4;
    string userId = 5;
}

// path: #/components/schemas/groupMemberJoinAcceptedPayload
message GroupMemberJoinAcceptedPayload {
    string namespace = 1;
    string groupId = 2;
    string groupName = 3;
    string requesterUserId = 4;
    string acceptedUserId = 5;
}

// path: #/components/schemas/groupMemberJoinRejectedPayload
message GroupMemberJoinRejectedPayload {
    string namespace = 1;
    string groupId = 2;
    string groupName = 3;
    string requesterUserId = 4;
    string rejectedUserId = 5;
}

// path: #/components/schemas/groupCreatedPayload
message GroupCreatedPayload {
    string namespace = 1;
    string groupId = 2;
    string groupName = 3;
    string groupDescription = 4;
    string groupIcon = 5;
    string groupRegion = 6;
    string groupType = 7;
    string userId = 8;
}

// path: #/components/schemas/groupUpdatedPayload
message GroupUpdatedPayload {
    string namespace = 1;
    string groupId = 2;
    string groupName = 3;
    string groupDescription = 4;
    string groupIcon = 5;
    string groupRegion = 6;
    string groupType = 7;
    string userId = 8;
}

// path: #/components/schemas/groupCustomRulesUpdatedPayload
message GroupCustomRulesUpdatedPayload {
    string namespace = 1;
    string groupId = 2;
    string groupName = 3;
    string groupCustomRules = 4;
    string userId = 5;
}

// path: #/components/schemas/groupDeletedPayload
message GroupDeletedPayload {
    string namespace = 1;
    string groupId = 2;
    string groupName = 3;
    string userId = 4;
}

// path: #/components/schemas/groupPredefinedRulesUpdatedPayload
message GroupPredefinedRulesUpdatedPayload {
    string namespace = 1;
    string groupId = 2;
    string groupName = 3;
    string groupPredefinedRules = 4;
    string userId = 5;
}

// path: #/components/schemas/groupPredefinedRulesDeletedPayload
message GroupPredefinedRulesDeletedPayload {
    string namespace = 1;
    string groupId = 2;
    string groupName = 3;
    string groupPredefinedRules = 4;
    string userId = 5;
}

// path: #/components/schemas/groupRoleAssignedPayload
message GroupRoleAssignedPayload {
    string namespace = 1;
    string groupId = 2;
    string groupName = 3;
    string memberRoleId = 4;
    string requesterUserId = 5;
    string assignedUserId = 6;
}

// path: #/components/schemas/groupRoleRemovedPayload
message GroupRoleRemovedPayload {
    string namespace = 1;
    string groupId = 2;
    string groupName = 3;
    string memberRoleId = 4;
    string requesterUserId = 5;
    string removedUserId = 6;
}

// path: #/components/schemas/groupMemberInvitationAcceptedPayload
message GroupMemberInvitationAcceptedPayload {
    string namespace = 1;
    string groupId = 2;
    string groupName = 3;
    string userId = 4;
}

// path: #/components/schemas/groupMemberInvitationRejectedPayload
message GroupMemberInvitationRejectedPayload {
    string namespace = 1;
    string groupId = 2;
    string groupName = 3;
    string userId = 4;
}

// path: #/components/schemas/groupMemberLeftPayload
message GroupMemberLeftPayload {
    string namespace = 1;
    string groupId = 2;
    string groupName = 3;
    string userId = 4;
}

// path: #/components/schemas/groupMemberJoinRequestCanceledPayload
message GroupMemberJoinRequestCanceledPayload {
    string namespace = 1;
    string groupId = 2;
    string groupName = 3;
    string userId = 4;
}

// path: #/components/schemas/groupMemberKickedPayload
message GroupMemberKickedPayload {
    string namespace = 1;
    string groupId = 2;
    string groupName = 3;
    string requesterUserId = 4;
    string kickedUserId = 5;
}

// path: #/components/schemas/groupMemberInvitationMemberCanceledPayload
message GroupMemberInvitationMemberCanceledPayload {
    string namespace = 1;
    string groupId = 2;
    string groupName = 3;
    string requesterUserId = 4;
    string cancelledUserId = 5;
}


// --- #/components/messages/{message_name} ---


// --- #/channels/{channel_name}/{operation_type}/message ---


// --- service ---

service GroupServiceEvents {
    // Group Member Group Member Invited Channel

    // Publishes a message to the Group Member Group Member Invited channel.
    rpc PublishToGroupMemberGroupMemberInvitedChannel(GroupMemberInvitedMessage) returns (google.protobuf.Empty);

    // Group Member Group Member Join Requested Channel

    // Publishes a message to the Group Member Group Member Join Requested channel.
    rpc PublishToGroupMemberGroupMemberJoinRequestedChannel(GroupMemberJoinRequestedMessage) returns (google.protobuf.Empty);

    // Group Member Group Member Join Accepted Channel

    // Publishes a message to the Group Member Group Member Join Accepted channel.
    rpc PublishToGroupMemberGroupMemberJoinAcceptedChannel(GroupMemberJoinAcceptedMessage) returns (google.protobuf.Empty);

    // Group Member Group Member Join Rejected Channel

    // Publishes a message to the Group Member Group Member Join Rejected channel.
    rpc PublishToGroupMemberGroupMemberJoinRejectedChannel(GroupMemberJoinRejectedMessage) returns (google.protobuf.Empty);

    // Group Group Created Channel

    // Publishes a message to the Group Group Created channel.
    rpc PublishToGroupGroupCreatedChannel(GroupCreatedMessage) returns (google.protobuf.Empty);

    // Group Group Updated Channel

    // Publishes a message to the Group Group Updated channel.
    rpc PublishToGroupGroupUpdatedChannel(GroupUpdatedMessage) returns (google.protobuf.Empty);

    // Group Group Custom Rules Updated Channel

    // Publishes a message to the Group Group Custom Rules Updated channel.
    rpc PublishToGroupGroupCustomRulesUpdatedChannel(GroupCustomRulesUpdatedMessage) returns (google.protobuf.Empty);

    // Group Group Deleted Channel

    // Publishes a message to the Group Group Deleted channel.
    rpc PublishToGroupGroupDeletedChannel(GroupDeletedMessage) returns (google.protobuf.Empty);

    // Group Group Predefined Rules Updated Channel

    // Publishes a message to the Group Group Predefined Rules Updated channel.
    rpc PublishToGroupGroupPredefinedRulesUpdatedChannel(GroupPredefinedRulesUpdatedMessage) returns (google.protobuf.Empty);

    // Group Group Predefined Rules Deleted Channel

    // Publishes a message to the Group Group Predefined Rules Deleted channel.
    rpc PublishToGroupGroupPredefinedRulesDeletedChannel(GroupPredefinedRulesDeletedMessage) returns (google.protobuf.Empty);

    // Group Roles Group Role Assigned Channel

    // Publishes a message to the Group Roles Group Role Assigned channel.
    rpc PublishToGroupRolesGroupRoleAssignedChannel(GroupRoleAssignedMessage) returns (google.protobuf.Empty);

    // Group Roles Group Role Removed Channel

    // Publishes a message to the Group Roles Group Role Removed channel.
    rpc PublishToGroupRolesGroupRoleRemovedChannel(GroupRoleRemovedMessage) returns (google.protobuf.Empty);

    // Group Member Group Member Invitation Accepted Channel

    // Publishes a message to the Group Member Group Member Invitation Accepted channel.
    rpc PublishToGroupMemberGroupMemberInvitationAcceptedChannel(GroupMemberInvitationAcceptedMessage) returns (google.protobuf.Empty);

    // Group Member Group Member Invitation Rejected Channel

    // Publishes a message to the Group Member Group Member Invitation Rejected channel.
    rpc PublishToGroupMemberGroupMemberInvitationRejectedChannel(GroupMemberInvitationRejectedMessage) returns (google.protobuf.Empty);

    // Group Member Group Member Left Channel

    // Publishes a message to the Group Member Group Member Left channel.
    rpc PublishToGroupMemberGroupMemberLeftChannel(GroupMemberLeftMessage) returns (google.protobuf.Empty);

    // Group Member Group Member Join Request Canceled Channel

    // Publishes a message to the Group Member Group Member Join Request Canceled channel.
    rpc PublishToGroupMemberGroupMemberJoinRequestCanceledChannel(GroupMemberJoinRequestCanceledMessage) returns (google.protobuf.Empty);

    // Group Member Group Member Kicked Channel

    // Publishes a message to the Group Member Group Member Kicked channel.
    rpc PublishToGroupMemberGroupMemberKickedChannel(GroupMemberKickedMessage) returns (google.protobuf.Empty);

    // Group Member Group Member Invitation Member Canceled Channel

    // Publishes a message to the Group Member Group Member Invitation Member Canceled channel.
    rpc PublishToGroupMemberGroupMemberInvitationMemberCanceledChannel(GroupMemberInvitationMemberCanceledMessage) returns (google.protobuf.Empty);
}
