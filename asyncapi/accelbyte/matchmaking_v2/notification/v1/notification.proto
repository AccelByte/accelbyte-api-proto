// Copyright (c) 2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// source: MatchmakingV2/AsyncAPI/notification.yaml (0.1.0)

syntax = "proto3";

package accelbyte.matchmaking_v2.notification.v1;
// Version v1.0.0

// --- imports ---

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

// --- options ---

option csharp_namespace = "AccelByte.MatchmakingV2.Notification";
option go_package = "accelbyte.net/matchmakingV2/notification";
option java_multiple_files = true;
option java_package = "net.accelbyte.matchmakingV2.notification";

// --- schema objects ---

// path: #/components/schemas/event
message Event {
    string id = 1;
    int64 version = 2;
    string name = 3;
    string namespace = 4;
    string parentNamespace = 5;
    string timestamp = 6;
    string traceId = 7;
    string spanContext = 8;
}

// path: #/components/schemas/notificationPayload
message NotificationPayload {
    repeated string userIds = 1;
    string namespace = 2;
    string topicName = 3;
    string message = 4;
}

// path: #/components/messages/freeformUserNotification/payload
message FreeformUserNotification {
    NotificationPayload payload = 1;

    // allOf(#/components/schemas/event)
    string id = 2;
    int64 version = 3;
    string name = 4;
    string namespace = 5;
    string parentNamespace = 6;
    string timestamp = 7;
    string traceId = 8;
    string spanContext = 9;
}

// path: #/components/messages/MatchmakingEvent/payload
message MatchmakingEvent {
    NotificationPayload payload = 1;

    // allOf(#/components/schemas/event)
    string id = 2;
    int64 version = 3;
    string name = 4;
    string namespace = 5;
    string parentNamespace = 6;
    string timestamp = 7;
    string traceId = 8;
    string spanContext = 9;
}

// path: #/components/messages/MatchmakingStartedEvent/payload
message MatchmakingStartedEvent {
    NotificationPayload payload = 1;

    // allOf(#/components/schemas/event)
    string id = 2;
    int64 version = 3;
    string name = 4;
    string namespace = 5;
    string parentNamespace = 6;
    string timestamp = 7;
    string traceId = 8;
    string spanContext = 9;
}

// path: #/components/messages/MatchmakingTicketExpiredEvent/payload
message MatchmakingTicketExpiredEvent {
    NotificationPayload payload = 1;

    // allOf(#/components/schemas/event)
    string id = 2;
    int64 version = 3;
    string name = 4;
    string namespace = 5;
    string parentNamespace = 6;
    string timestamp = 7;
    string traceId = 8;
    string spanContext = 9;
}

// path: #/components/messages/MatchmakingTicketCanceledEvent/payload
message MatchmakingTicketCanceledEvent {
    NotificationPayload payload = 1;

    // allOf(#/components/schemas/event)
    string id = 2;
    int64 version = 3;
    string name = 4;
    string namespace = 5;
    string parentNamespace = 6;
    string timestamp = 7;
    string traceId = 8;
    string spanContext = 9;
}

// path: #/components/messages/MatchmakingTicketRejectedEvent/payload
message MatchmakingTicketRejectedEvent {
    NotificationPayload payload = 1;

    // allOf(#/components/schemas/event)
    string id = 2;
    int64 version = 3;
    string name = 4;
    string namespace = 5;
    string parentNamespace = 6;
    string timestamp = 7;
    string traceId = 8;
    string spanContext = 9;
}

// path: #/components/messages/MatchmakingTicketFoundEvent/payload
message MatchmakingTicketFoundEvent {
    NotificationPayload payload = 1;

    // allOf(#/components/schemas/event)
    string id = 2;
    int64 version = 3;
    string name = 4;
    string namespace = 5;
    string parentNamespace = 6;
    string timestamp = 7;
    string traceId = 8;
    string spanContext = 9;
}

// path: #/components/messages/MatchFoundEvent/payload
message MatchFoundEvent {
    NotificationPayload payload = 1;

    // allOf(#/components/schemas/event)
    string id = 2;
    int64 version = 3;
    string name = 4;
    string namespace = 5;
    string parentNamespace = 6;
    string timestamp = 7;
    string traceId = 8;
    string spanContext = 9;
}

// path: #/components/messages/BackfillFoundEvent/payload
message BackfillFoundEvent {
    NotificationPayload payload = 1;

    // allOf(#/components/schemas/event)
    string id = 2;
    int64 version = 3;
    string name = 4;
    string namespace = 5;
    string parentNamespace = 6;
    string timestamp = 7;
    string traceId = 8;
    string spanContext = 9;
}

// path: #/components/messages/BackfillProposalSentEvent/payload
message BackfillProposalSentEvent {
    NotificationPayload payload = 1;

    // allOf(#/components/schemas/event)
    string id = 2;
    int64 version = 3;
    string name = 4;
    string namespace = 5;
    string parentNamespace = 6;
    string timestamp = 7;
    string traceId = 8;
    string spanContext = 9;
}

// path: #/components/messages/BackfillProposalAcceptedEvent/payload
message BackfillProposalAcceptedEvent {
    NotificationPayload payload = 1;

    // allOf(#/components/schemas/event)
    string id = 2;
    int64 version = 3;
    string name = 4;
    string namespace = 5;
    string parentNamespace = 6;
    string timestamp = 7;
    string traceId = 8;
    string spanContext = 9;
}

// path: #/components/messages/BackfillProposalRejectedEvent/payload
message BackfillProposalRejectedEvent {
    NotificationPayload payload = 1;

    // allOf(#/components/schemas/event)
    string id = 2;
    int64 version = 3;
    string name = 4;
    string namespace = 5;
    string parentNamespace = 6;
    string timestamp = 7;
    string traceId = 8;
    string spanContext = 9;
}

// path: #/components/messages/BackfillProposalExpiredEvent/payload
message BackfillProposalExpiredEvent {
    NotificationPayload payload = 1;

    // allOf(#/components/schemas/event)
    string id = 2;
    int64 version = 3;
    string name = 4;
    string namespace = 5;
    string parentNamespace = 6;
    string timestamp = 7;
    string traceId = 8;
    string spanContext = 9;
}

// path: #/components/messages/BackfillTicketExpiredEvent/payload
message BackfillTicketExpiredEvent {
    NotificationPayload payload = 1;

    // allOf(#/components/schemas/event)
    string id = 2;
    int64 version = 3;
    string name = 4;
    string namespace = 5;
    string parentNamespace = 6;
    string timestamp = 7;
    string traceId = 8;
    string spanContext = 9;
}


// --- #/components/messages/{message_name} ---

// path: #/components/messages/freeformUserNotification
message FreeformUserNotificationMessage {
    FreeformUserNotification payload = 1;
}

// path: #/components/messages/MatchmakingEvent
message MatchmakingEventMessage {
    MatchmakingEvent payload = 1;
}

// path: #/components/messages/MatchmakingStartedEvent
message MatchmakingStartedEventMessage {
    MatchmakingStartedEvent payload = 1;
}

// path: #/components/messages/MatchmakingTicketExpiredEvent
message MatchmakingTicketExpiredEventMessage {
    MatchmakingTicketExpiredEvent payload = 1;
}

// path: #/components/messages/MatchmakingTicketCanceledEvent
message MatchmakingTicketCanceledEventMessage {
    MatchmakingTicketCanceledEvent payload = 1;
}

// path: #/components/messages/MatchmakingTicketRejectedEvent
message MatchmakingTicketRejectedEventMessage {
    MatchmakingTicketRejectedEvent payload = 1;
}

// path: #/components/messages/MatchmakingTicketFoundEvent
message MatchmakingTicketFoundEventMessage {
    MatchmakingTicketFoundEvent payload = 1;
}

// path: #/components/messages/MatchFoundEvent
message MatchFoundEventMessage {
    MatchFoundEvent payload = 1;
}

// path: #/components/messages/BackfillFoundEvent
message BackfillFoundEventMessage {
    BackfillFoundEvent payload = 1;
}

// path: #/components/messages/BackfillProposalSentEvent
message BackfillProposalSentEventMessage {
    BackfillProposalSentEvent payload = 1;
}

// path: #/components/messages/BackfillProposalAcceptedEvent
message BackfillProposalAcceptedEventMessage {
    BackfillProposalAcceptedEvent payload = 1;
}

// path: #/components/messages/BackfillProposalRejectedEvent
message BackfillProposalRejectedEventMessage {
    BackfillProposalRejectedEvent payload = 1;
}

// path: #/components/messages/BackfillProposalExpiredEvent
message BackfillProposalExpiredEventMessage {
    BackfillProposalExpiredEvent payload = 1;
}

// path: #/components/messages/BackfillTicketExpiredEvent
message BackfillTicketExpiredEventMessage {
    BackfillTicketExpiredEvent payload = 1;
}


// --- #/channels/{channel_name}/{operation_type}/message ---

// path: #/channels/mpv2SessionHistory/publish/message
message Mpv2SessionHistoryPublish {
    oneof payload {
        MatchmakingEventMessage variant0 = 1;
        MatchmakingStartedEventMessage variant1 = 2;
        MatchmakingTicketExpiredEventMessage variant2 = 3;
        MatchmakingTicketCanceledEventMessage variant3 = 4;
        MatchmakingTicketRejectedEventMessage variant4 = 5;
        MatchmakingTicketFoundEventMessage variant5 = 6;
        MatchFoundEventMessage variant6 = 7;
        BackfillFoundEventMessage variant7 = 8;
        BackfillProposalSentEventMessage variant8 = 9;
        BackfillProposalAcceptedEventMessage variant9 = 10;
        BackfillProposalRejectedEventMessage variant10 = 11;
        BackfillProposalExpiredEventMessage variant11 = 12;
        BackfillTicketExpiredEventMessage variant12 = 13;
    }
}


// --- service ---


// Publishes a message to the Freeform User Notification Request channel. (freeformUserNotificationRequest FreeformUserNotification)
service FreeformUserNotificationRequestFreeformUserNotificationService {
    rpc OnMessage(FreeformUserNotification) returns (google.protobuf.Empty);
}

// Publishes a MatchmakingEvent to the Mpv2 Session History channel. (oneOf variant) (mpv2SessionHistory MatchmakingEvent)
service Mpv2SessionHistoryMatchmakingEventService {
    rpc OnMessage(MatchmakingEvent) returns (google.protobuf.Empty);
}

// Publishes a MatchmakingStartedEvent to the Mpv2 Session History channel. (oneOf variant) (mpv2SessionHistory MatchmakingStartedEvent)
service Mpv2SessionHistoryMatchmakingStartedEventService {
    rpc OnMessage(MatchmakingStartedEvent) returns (google.protobuf.Empty);
}

// Publishes a MatchmakingTicketExpiredEvent to the Mpv2 Session History channel. (oneOf variant) (mpv2SessionHistory MatchmakingTicketExpiredEvent)
service Mpv2SessionHistoryMatchmakingTicketExpiredEventService {
    rpc OnMessage(MatchmakingTicketExpiredEvent) returns (google.protobuf.Empty);
}

// Publishes a MatchmakingTicketCanceledEvent to the Mpv2 Session History channel. (oneOf variant) (mpv2SessionHistory MatchmakingTicketCanceledEvent)
service Mpv2SessionHistoryMatchmakingTicketCanceledEventService {
    rpc OnMessage(MatchmakingTicketCanceledEvent) returns (google.protobuf.Empty);
}

// Publishes a MatchmakingTicketRejectedEvent to the Mpv2 Session History channel. (oneOf variant) (mpv2SessionHistory MatchmakingTicketRejectedEvent)
service Mpv2SessionHistoryMatchmakingTicketRejectedEventService {
    rpc OnMessage(MatchmakingTicketRejectedEvent) returns (google.protobuf.Empty);
}

// Publishes a MatchmakingTicketFoundEvent to the Mpv2 Session History channel. (oneOf variant) (mpv2SessionHistory MatchmakingTicketFoundEvent)
service Mpv2SessionHistoryMatchmakingTicketFoundEventService {
    rpc OnMessage(MatchmakingTicketFoundEvent) returns (google.protobuf.Empty);
}

// Publishes a MatchFoundEvent to the Mpv2 Session History channel. (oneOf variant) (mpv2SessionHistory MatchFoundEvent)
service Mpv2SessionHistoryMatchFoundEventService {
    rpc OnMessage(MatchFoundEvent) returns (google.protobuf.Empty);
}

// Publishes a BackfillFoundEvent to the Mpv2 Session History channel. (oneOf variant) (mpv2SessionHistory BackfillFoundEvent)
service Mpv2SessionHistoryBackfillFoundEventService {
    rpc OnMessage(BackfillFoundEvent) returns (google.protobuf.Empty);
}

// Publishes a BackfillProposalSentEvent to the Mpv2 Session History channel. (oneOf variant) (mpv2SessionHistory BackfillProposalSentEvent)
service Mpv2SessionHistoryBackfillProposalSentEventService {
    rpc OnMessage(BackfillProposalSentEvent) returns (google.protobuf.Empty);
}

// Publishes a BackfillProposalAcceptedEvent to the Mpv2 Session History channel. (oneOf variant) (mpv2SessionHistory BackfillProposalAcceptedEvent)
service Mpv2SessionHistoryBackfillProposalAcceptedEventService {
    rpc OnMessage(BackfillProposalAcceptedEvent) returns (google.protobuf.Empty);
}

// Publishes a BackfillProposalRejectedEvent to the Mpv2 Session History channel. (oneOf variant) (mpv2SessionHistory BackfillProposalRejectedEvent)
service Mpv2SessionHistoryBackfillProposalRejectedEventService {
    rpc OnMessage(BackfillProposalRejectedEvent) returns (google.protobuf.Empty);
}

// Publishes a BackfillProposalExpiredEvent to the Mpv2 Session History channel. (oneOf variant) (mpv2SessionHistory BackfillProposalExpiredEvent)
service Mpv2SessionHistoryBackfillProposalExpiredEventService {
    rpc OnMessage(BackfillProposalExpiredEvent) returns (google.protobuf.Empty);
}

// Publishes a BackfillTicketExpiredEvent to the Mpv2 Session History channel. (oneOf variant) (mpv2SessionHistory BackfillTicketExpiredEvent)
service Mpv2SessionHistoryBackfillTicketExpiredEventService {
    rpc OnMessage(BackfillTicketExpiredEvent) returns (google.protobuf.Empty);
}