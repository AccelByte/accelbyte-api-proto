// Copyright (c) 2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// source: MatchmakingV2/AsyncAPI/notification.yaml (0.1.0)

syntax = "proto3";

package accelbyte.matchmaking_v2.notification.v1;
// Version v1.0.0

// --- imports ---

import "google/protobuf/empty.proto";


// --- options ---

option csharp_namespace = "AccelByte.MatchmakingV2.Notification";
option go_package = "accelbyte.net/matchmakingV2/notification";
option java_multiple_files = true;
option java_package = "net.accelbyte.matchmakingV2.notification";

// --- schema objects ---

// path: #/components/schemas/event
message Event {
    string id = 1;
    int64 version = 2;
    string name = 3;
    string namespace = 4;
    string parentNamespace = 5;
    string timestamp = 6;
    string traceId = 7;
    string spanContext = 8;
}

// path: #/components/schemas/notificationPayload
message NotificationPayload {
    repeated string userIds = 1;
    string namespace = 2;
    string topicName = 3;
    string message = 4;
}

// path: #/components/messages/freeformUserNotification/payload/properties/payload
message AnonymousSchema1 {

    // allOf(#/components/schemas/notificationPayload)
    repeated string userIds = 1;
    string namespace = 2;
    string topicName = 3;
    string message = 4;
}

// path: #/components/messages/freeformUserNotification/payload
message FreeformUserNotificationMessage {
    AnonymousSchema1 payload = 1;

    // allOf(#/components/schemas/event)
    string id = 2;
    int64 version = 3;
    string name = 4;
    string namespace = 5;
    string parentNamespace = 6;
    string timestamp = 7;
    string traceId = 8;
    string spanContext = 9;
}


// --- #/components/messages/{message_name} ---

// path: #/components/messages/freeformUserNotification
message FreeformUserNotification {
    FreeformUserNotificationMessage payload = 1;
}


// --- #/channels/{channel_name}/{operation_type}/message ---

// path: #/channels/freeformUserNotificationRequest/publish/message
message FreeformUserNotificationRequestPublish {
    oneof payload {
        FreeformUserNotification variant0 = 1;
    }
}


// --- service ---

service MatchmakingV2NotificationEvents {
    // Freeform User Notification Request Channel

    // Publishes a message to the Freeform User Notification Request channel.
    rpc PublishToFreeformUserNotificationRequestChannel(FreeformUserNotificationRequestPublish) returns (google.protobuf.Empty);

    // Publishes a FreeformUserNotificationMessage to the Freeform User Notification Request channel. (oneOf variant)
    rpc PublishFreeformUserNotificationMessageToFreeformUserNotificationRequestChannel(FreeformUserNotificationMessage) returns (google.protobuf.Empty);
}
