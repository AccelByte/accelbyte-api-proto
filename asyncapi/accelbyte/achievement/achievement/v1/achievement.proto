// Copyright (c) 2025 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// source: Achievement/AsyncAPI/achievement.yaml (0.1.0)

syntax = "proto3";

package accelbyte.achievement.achievement.v1;
// Version v1.0.0

// --- imports ---

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

// --- options ---

option csharp_namespace = "AccelByte.Achievement.Achievement";
option go_package = "accelbyte.net/achievement/achievement";
option java_multiple_files = true;
option java_package = "net.accelbyte.achievement.achievement";

// --- schema objects ---

// path: #/components/schemas/event
message Event {
    string id = 1 [json_name = "id"];
    int64 version = 2 [json_name = "version"];
    string name = 3 [json_name = "name"];
    string namespace = 4 [json_name = "namespace"];
    string timestamp = 5 [json_name = "timestamp"];
    string client_id = 6 [json_name = "clientId"];
    string user_id = 7 [json_name = "userId"];
    string trace_id = 8 [json_name = "traceId"];
    string session_id = 9 [json_name = "sessionId"];
}

// path: #/components/schemas/userAchievement
message UserAchievement {
    string user_id = 1 [json_name = "userId"];
    string namespace = 2 [json_name = "namespace"];
    string achievement_code = 3 [json_name = "achievementCode"];
    int64 status = 4 [json_name = "status"];
    int64 achieved_at = 5 [json_name = "achievedAt"];
    string stat_code = 6 [json_name = "statCode"];
}

// path: #/components/schemas/globalAchievement
message GlobalAchievement {
    string achievement_code = 1 [json_name = "achievementCode"];
    string namespace = 2 [json_name = "namespace"];
    int64 status = 3 [json_name = "status"];
    int64 achieved_at = 4 [json_name = "achievedAt"];
}

// path: #/components/schemas/achievementRewardClaimed
message AchievementRewardClaimed {
    string user_id = 1 [json_name = "userId"];
    string achievement_code = 2 [json_name = "achievementCode"];
    string namespace = 3 [json_name = "namespace"];
    int64 status = 4 [json_name = "status"];
    int64 achievement = 5 [json_name = "achievement"];
    int64 claimed_at = 6 [json_name = "claimedAt"];
}

// path: #/components/schemas/userAchievementUnlockedPayloadData
message UserAchievementUnlockedPayloadData { // previously known as 'AnonymousSchema1'
    UserAchievement user_achievement = 1 [json_name = "userAchievement"];
}

// path: #/components/schemas/globalAchievementUnlockedPayloadData
message GlobalAchievementUnlockedPayloadData { // previously known as 'AnonymousSchema2'
    GlobalAchievement global_achievement = 1 [json_name = "globalAchievement"];
}

// path: #/components/schemas/achievementRewardClaimedPayloadData
message AchievementRewardClaimedPayloadData { // previously known as 'AnonymousSchema3'
    AchievementRewardClaimed achievement_reward_claimed = 1 [json_name = "achievementRewardClaimed"];
}

// path: #/components/messages/userAchievementUnlocked/payload
message UserAchievementUnlocked {
    UserAchievementUnlockedPayloadData payload = 1 [json_name = "payload"];

    // allOf(#/components/schemas/event)
    string id = 2 [json_name = "id"];
    int64 version = 3 [json_name = "version"];
    string name = 4 [json_name = "name"];
    string namespace = 5 [json_name = "namespace"];
    string timestamp = 6 [json_name = "timestamp"];
    string client_id = 7 [json_name = "clientId"];
    string user_id = 8 [json_name = "userId"];
    string trace_id = 9 [json_name = "traceId"];
    string session_id = 10 [json_name = "sessionId"];
}

// path: #/components/messages/globalAchievementUnlocked/payload
message GlobalAchievementUnlocked {
    GlobalAchievementUnlockedPayloadData payload = 1 [json_name = "payload"];

    // allOf(#/components/schemas/event)
    string id = 2 [json_name = "id"];
    int64 version = 3 [json_name = "version"];
    string name = 4 [json_name = "name"];
    string namespace = 5 [json_name = "namespace"];
    string timestamp = 6 [json_name = "timestamp"];
    string client_id = 7 [json_name = "clientId"];
    string user_id = 8 [json_name = "userId"];
    string trace_id = 9 [json_name = "traceId"];
    string session_id = 10 [json_name = "sessionId"];
}

// path: #/components/messages/achievementRewardClaimed/payload
message AchievementRewardClaimedPayload {
    AchievementRewardClaimedPayloadData payload = 1 [json_name = "payload"];

    // allOf(#/components/schemas/event)
    string id = 2 [json_name = "id"];
    int64 version = 3 [json_name = "version"];
    string name = 4 [json_name = "name"];
    string namespace = 5 [json_name = "namespace"];
    string timestamp = 6 [json_name = "timestamp"];
    string client_id = 7 [json_name = "clientId"];
    string user_id = 8 [json_name = "userId"];
    string trace_id = 9 [json_name = "traceId"];
    string session_id = 10 [json_name = "sessionId"];
}


// --- #/components/messages/{message_name} ---

// path: #/components/messages/userAchievementUnlocked
message UserAchievementUnlockedMessage {
    UserAchievementUnlocked payload = 1;
}

// path: #/components/messages/globalAchievementUnlocked
message GlobalAchievementUnlockedMessage {
    GlobalAchievementUnlocked payload = 1;
}

// path: #/components/messages/achievementRewardClaimed
message AchievementRewardClaimedMessage {
    AchievementRewardClaimedPayload payload = 1;
}


// --- #/channels/{channel_name}/{operation_type}/message ---

// path: #/channels/achievement/publish/message
message AchievementPublish {
    oneof payload {
        UserAchievementUnlockedMessage variant0 = 1;
        GlobalAchievementUnlockedMessage variant1 = 2;
        AchievementRewardClaimedMessage variant2 = 3;
    }
}


// --- service ---


// Publishes a UserAchievementUnlocked to the Achievement channel. (oneOf variant) (achievement UserAchievementUnlocked)
service AchievementUserAchievementUnlockedService {
    rpc OnMessage(UserAchievementUnlocked) returns (google.protobuf.Empty);
}

// Publishes a GlobalAchievementUnlocked to the Achievement channel. (oneOf variant) (achievement GlobalAchievementUnlocked)
service AchievementGlobalAchievementUnlockedService {
    rpc OnMessage(GlobalAchievementUnlocked) returns (google.protobuf.Empty);
}

// Publishes a AchievementRewardClaimedPayload to the Achievement channel. (oneOf variant) (achievement AchievementRewardClaimed)
service AchievementAchievementRewardClaimedService {
    rpc OnMessage(AchievementRewardClaimedPayload) returns (google.protobuf.Empty);
}