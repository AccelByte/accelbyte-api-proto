// Copyright (c) 2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// source: API Gateway/AsyncAPI/session.yaml (0.1.0)

syntax = "proto3";

package accelbyte.api_gateway.session.v1;
// Version v1.0.0

// --- imports ---

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

// --- options ---

option csharp_namespace = "AccelByte.APIGateway.Session";
option go_package = "accelbyte.net/apiGateway/session";
option java_multiple_files = true;
option java_package = "net.accelbyte.apiGateway.session";

// --- schema objects ---

// path: #/components/schemas/event
message Event {
    string id = 1;
    int64 version = 2;
    string name = 3;
    string namespace = 4;
    string parentNamespace = 5;
    string timestamp = 6;
    string clientId = 7;
    string userId = 8;
    string traceId = 9;
    string sessionId = 10;
}

// path: #/components/schemas/session
message Session {
    string sessionId = 1;
    string userId = 2;
    string accessToken = 3;
    string refreshToken = 4;
    string deviceId = 5;
    string deviceType = 6;
    string deviceName = 7;
    string deviceOrigin = 8;
    string deviceOs = 9;
    string city = 10;
    string state = 11;
    string country = 12;
    string createdAt = 13;
    string expiredAt = 14;
}

// path: #/components/messages/sessionCreated/payload/properties/payload
message AnonymousSchema1 {
    Session session = 1;
}

// path: #/components/messages/sessionCreated/payload
message SessionCreated {
    AnonymousSchema1 payload = 1;

    // allOf(#/components/schemas/event)
    string id = 2;
    int64 version = 3;
    string name = 4;
    string namespace = 5;
    string parentNamespace = 6;
    string timestamp = 7;
    string clientId = 8;
    string userId = 9;
    string traceId = 10;
    string sessionId = 11;
}

// path: #/components/messages/sessionDeleted/payload/properties/payload
message AnonymousSchema2 {
    Session session = 1;
}

// path: #/components/messages/sessionDeleted/payload
message SessionDeleted {
    AnonymousSchema2 payload = 1;

    // allOf(#/components/schemas/event)
    string id = 2;
    int64 version = 3;
    string name = 4;
    string namespace = 5;
    string parentNamespace = 6;
    string timestamp = 7;
    string clientId = 8;
    string userId = 9;
    string traceId = 10;
    string sessionId = 11;
}

// path: #/components/messages/sessionUpdated/payload/properties/payload
message AnonymousSchema3 {
    Session session = 1;
}

// path: #/components/messages/sessionUpdated/payload
message SessionUpdated {
    AnonymousSchema3 payload = 1;

    // allOf(#/components/schemas/event)
    string id = 2;
    int64 version = 3;
    string name = 4;
    string namespace = 5;
    string parentNamespace = 6;
    string timestamp = 7;
    string clientId = 8;
    string userId = 9;
    string traceId = 10;
    string sessionId = 11;
}


// --- #/components/messages/{message_name} ---

// path: #/components/messages/sessionCreated
message SessionCreatedMessage {
    SessionCreated payload = 1;
}

// path: #/components/messages/sessionDeleted
message SessionDeletedMessage {
    SessionDeleted payload = 1;
}

// path: #/components/messages/sessionUpdated
message SessionUpdatedMessage {
    SessionUpdated payload = 1;
}


// --- #/channels/{channel_name}/{operation_type}/message ---

// path: #/channels/session/publish/message
message SessionPublish {
    oneof payload {
        SessionCreatedMessage variant0 = 1;
        SessionDeletedMessage variant1 = 2;
        SessionUpdatedMessage variant2 = 3;
    }
}


// --- service ---


// Publishes a SessionCreated to the Session channel. (oneOf variant) (session SessionCreated)
service SessionSessionCreatedService {
    rpc OnMessage(SessionCreated) returns (google.protobuf.Empty);
}

// Publishes a SessionDeleted to the Session channel. (oneOf variant) (session SessionDeleted)
service SessionSessionDeletedService {
    rpc OnMessage(SessionDeleted) returns (google.protobuf.Empty);
}

// Publishes a SessionUpdated to the Session channel. (oneOf variant) (session SessionUpdated)
service SessionSessionUpdatedService {
    rpc OnMessage(SessionUpdated) returns (google.protobuf.Empty);
}