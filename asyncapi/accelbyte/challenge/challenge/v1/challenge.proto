// Copyright (c) 2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// source: Challenge/AsyncAPI/challenge.yaml (1.0.0)

syntax = "proto3";

package accelbyte.challenge.challenge.v1;
// Version v1.0.0

// --- imports ---

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

// --- options ---

option csharp_namespace = "AccelByte.Challenge.Challenge";
option go_package = "accelbyte.net/challenge/challenge";
option java_multiple_files = true;
option java_package = "net.accelbyte.challenge.challenge";

// --- schema objects ---

// path: #/components/schemas/event
message Event {
    string id = 1 [json_name = "id"];
    int64 version = 2 [json_name = "version"];
    string name = 3 [json_name = "name"];
    string namespace = 4 [json_name = "namespace"];
    string parent_namespace = 5 [json_name = "parentNamespace"];
    string timestamp = 6 [json_name = "timestamp"];
    string client_id = 7 [json_name = "clientId"];
    string user_id = 8 [json_name = "userId"];
    string trace_id = 9 [json_name = "traceId"];
    string session_id = 10 [json_name = "sessionId"];
    string span_context = 11 [json_name = "spanContext"];
}

// path: #/components/schemas/goalCompletedPayload
message GoalCompletedPayload {
    string namespace = 1 [json_name = "namespace"];
    string challenge_code = 2 [json_name = "challengeCode"];
    string goal_code = 3 [json_name = "goalCode"];
    string completed_at = 4 [json_name = "completedAt"];
    string user_id = 5 [json_name = "userId"];
    string schedule_id = 6 [json_name = "scheduleId"];
    string schedule_start = 7 [json_name = "scheduleStart"];
    string schedule_end = 8 [json_name = "scheduleEnd"];
}

// path: #/components/messages/goalCompleted/payload
message GoalCompleted {
    GoalCompletedPayload payload = 1 [json_name = "payload"];

    // allOf(#/components/schemas/event)
    string id = 2 [json_name = "id"];
    int64 version = 3 [json_name = "version"];
    string name = 4 [json_name = "name"];
    string namespace = 5 [json_name = "namespace"];
    string parent_namespace = 6 [json_name = "parentNamespace"];
    string timestamp = 7 [json_name = "timestamp"];
    string client_id = 8 [json_name = "clientId"];
    string user_id = 9 [json_name = "userId"];
    string trace_id = 10 [json_name = "traceId"];
    string session_id = 11 [json_name = "sessionId"];
    string span_context = 12 [json_name = "spanContext"];
}


// --- #/components/messages/{message_name} ---

// path: #/components/messages/goalCompleted
message GoalCompletedMessage {
    GoalCompleted payload = 1;
}


// --- #/channels/{channel_name}/{operation_type}/message ---


// --- service ---


// Publishes a message to the Goal Completed channel. (goalCompleted GoalCompleted)
service GoalCompletedGoalCompletedService {
    rpc OnMessage(GoalCompleted) returns (google.protobuf.Empty);
}