// Copyright (c) 2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// source: DSM/AsyncAPI/dsmc.yaml (0.0.1)

syntax = "proto3";

package accelbyte.dsm.dsmc.v1;
// Version v1.0.0

// --- imports ---

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

// --- options ---

option csharp_namespace = "AccelByte.DSM.Dsmc";
option go_package = "accelbyte.net/dsm/dsmc";
option java_multiple_files = true;
option java_package = "net.accelbyte.dsm.dsmc";

// --- schema objects ---

// path: #/components/schemas/event
message Event {
    string id = 1 [json_name = "id"];
    int64 version = 2 [json_name = "version"];
    string name = 3 [json_name = "name"];
    string namespace = 4 [json_name = "namespace"];
    string parent_namespace = 5 [json_name = "parentNamespace"];
    string target_namespace = 6 [json_name = "target_namespace"];
    string timestamp = 7 [json_name = "timestamp"];
    string topic = 8 [json_name = "topic"];
    string service = 9 [json_name = "service"];
    string session_id = 10 [json_name = "sessionId"];
    string trace_id = 11 [json_name = "traceId"];
    string user_id = 12 [json_name = "userId"];
    string client_id = 13 [json_name = "clientId"];
}

// path: #/components/schemas/allocationEvent
message AllocationEvent {
    string time_stamp = 1 [json_name = "time_stamp"];
    string type = 2 [json_name = "type"];
    string description = 3 [json_name = "description"];
}

// path: #/components/schemas/statusHistory
message StatusHistory {
    string time_stamp = 1 [json_name = "time_stamp"];
    string status = 2 [json_name = "status"]; // Allowed values: CREATING, READY, BUSY, REMOVING, UNREACHABLE, FAILED
}

// path: #/components/schemas/server/properties/ports
message AnonymousSchema1 {
}

// path: #/components/schemas/server
message Server {
    repeated AllocationEvent allocation_events = 1 [json_name = "allocation_events"];
    string allocation_id = 2 [json_name = "allocation_id"];
    repeated string alternate_ips = 3 [json_name = "alternate_ips"];
    int64 cpu_limit = 4 [json_name = "cpu_limit"];
    string created_at = 5 [json_name = "created_at"];
    string custom_attribute = 6 [json_name = "custom_attribute"];
    string deployment = 7 [json_name = "deployment"];
    string game_version = 8 [json_name = "game_version"];
    string image_version = 9 [json_name = "image_version"];
    string ip = 10 [json_name = "ip"];
    bool is_override_game_version = 11 [json_name = "is_override_game_version"];
    string job_id = 12 [json_name = "job_id"];
    string last_update = 13 [json_name = "last_update"];
    int64 mem_limit = 14 [json_name = "mem_limit"];
    string namespace = 15 [json_name = "namespace"];
    string params = 16 [json_name = "params"];
    string pod_name = 17 [json_name = "pod_name"];
    int64 port = 18 [json_name = "port"];
    AnonymousSchema1 ports = 19 [json_name = "ports"];
    string protocol = 20 [json_name = "protocol"];
    string provider = 21 [json_name = "provider"];
    string region = 22 [json_name = "region"];
    string session_id = 23 [json_name = "session_id"];
    string status = 24 [json_name = "status"]; // Allowed values: CREATING, READY, BUSY, REMOVING, UNREACHABLE, FAILED
    repeated StatusHistory status_history = 25 [json_name = "status_history"];
    bool is_core_dump_enabled = 26 [json_name = "is_core_dump_enabled"];
    string artifact_path = 27 [json_name = "artifact_path"];
}

// path: #/components/schemas/session
message Session {
    string id = 1 [json_name = "id"];
    string namespace = 2 [json_name = "namespace"];
    string provider = 3 [json_name = "provider"];
    string region = 4 [json_name = "region"];
    Server server = 5 [json_name = "Server"];
}

// path: #/components/schemas/dsNumEachRegionEachNamespace
message DsNumEachRegionEachNamespace {
}

// path: #/components/messages/allocationComplete/payload/properties/payload
message AnonymousSchema2 {
    string server = 1 [json_name = "server"];
    repeated AllocationEvent allocation_events = 2 [json_name = "allocationEvents"];
}

// path: #/components/messages/allocationComplete/payload
message AllocationComplete {
    AnonymousSchema2 payload = 1 [json_name = "payload"];

    // allOf(#/components/schemas/event)
    string id = 2 [json_name = "id"];
    int64 version = 3 [json_name = "version"];
    string name = 4 [json_name = "name"];
    string namespace = 5 [json_name = "namespace"];
    string parent_namespace = 6 [json_name = "parentNamespace"];
    string target_namespace = 7 [json_name = "target_namespace"];
    string timestamp = 8 [json_name = "timestamp"];
    string topic = 9 [json_name = "topic"];
    string service = 10 [json_name = "service"];
    string session_id = 11 [json_name = "sessionId"];
    string trace_id = 12 [json_name = "traceId"];
    string user_id = 13 [json_name = "userId"];
    string client_id = 14 [json_name = "clientId"];
}

// path: #/components/messages/dsClaimed/payload/properties/payload
message AnonymousSchema3 {
    bool ds_claimed = 1 [json_name = "dsClaimed"];
    string session_id = 2 [json_name = "sessionID"];
    string ds_claimed_at = 3 [json_name = "dsClaimedAt"];
}

// path: #/components/messages/dsClaimed/payload
message DsClaimed {
    AnonymousSchema3 payload = 1 [json_name = "payload"];

    // allOf(#/components/schemas/event)
    string id = 2 [json_name = "id"];
    int64 version = 3 [json_name = "version"];
    string name = 4 [json_name = "name"];
    string namespace = 5 [json_name = "namespace"];
    string parent_namespace = 6 [json_name = "parentNamespace"];
    string target_namespace = 7 [json_name = "target_namespace"];
    string timestamp = 8 [json_name = "timestamp"];
    string topic = 9 [json_name = "topic"];
    string service = 10 [json_name = "service"];
    string session_id = 11 [json_name = "sessionId"];
    string trace_id = 12 [json_name = "traceId"];
    string user_id = 13 [json_name = "userId"];
    string client_id = 14 [json_name = "clientId"];
}

// path: #/components/messages/dsCount/payload/properties/payload
message AnonymousSchema4 {
}

// path: #/components/messages/dsCount/payload
message DsCount {
    AnonymousSchema4 payload = 1 [json_name = "payload"];

    // allOf(#/components/schemas/event)
    string id = 2 [json_name = "id"];
    int64 version = 3 [json_name = "version"];
    string name = 4 [json_name = "name"];
    string namespace = 5 [json_name = "namespace"];
    string parent_namespace = 6 [json_name = "parentNamespace"];
    string target_namespace = 7 [json_name = "target_namespace"];
    string timestamp = 8 [json_name = "timestamp"];
    string topic = 9 [json_name = "topic"];
    string service = 10 [json_name = "service"];
    string session_id = 11 [json_name = "sessionId"];
    string trace_id = 12 [json_name = "traceId"];
    string user_id = 13 [json_name = "userId"];
    string client_id = 14 [json_name = "clientId"];
}

// path: #/components/messages/dsStatusChanged/payload/properties/payload
message AnonymousSchema5 {
    Server server = 1 [json_name = "server"];
    bool is_buffered = 2 [json_name = "isBuffered"];
}

// path: #/components/messages/dsStatusChanged/payload
message DsStatusChanged {
    AnonymousSchema5 payload = 1 [json_name = "payload"];

    // allOf(#/components/schemas/event)
    string id = 2 [json_name = "id"];
    int64 version = 3 [json_name = "version"];
    string name = 4 [json_name = "name"];
    string namespace = 5 [json_name = "namespace"];
    string parent_namespace = 6 [json_name = "parentNamespace"];
    string target_namespace = 7 [json_name = "target_namespace"];
    string timestamp = 8 [json_name = "timestamp"];
    string topic = 9 [json_name = "topic"];
    string service = 10 [json_name = "service"];
    string session_id = 11 [json_name = "sessionId"];
    string trace_id = 12 [json_name = "traceId"];
    string user_id = 13 [json_name = "userId"];
    string client_id = 14 [json_name = "clientId"];
}

// path: #/components/messages/sessionEnded/payload/properties/payload
message AnonymousSchema6 {
    Session session = 1 [json_name = "session"];
}

// path: #/components/messages/sessionEnded/payload
message SessionEnded {
    AnonymousSchema6 payload = 1 [json_name = "payload"];

    // allOf(#/components/schemas/event)
    string id = 2 [json_name = "id"];
    int64 version = 3 [json_name = "version"];
    string name = 4 [json_name = "name"];
    string namespace = 5 [json_name = "namespace"];
    string parent_namespace = 6 [json_name = "parentNamespace"];
    string target_namespace = 7 [json_name = "target_namespace"];
    string timestamp = 8 [json_name = "timestamp"];
    string topic = 9 [json_name = "topic"];
    string service = 10 [json_name = "service"];
    string session_id = 11 [json_name = "sessionId"];
    string trace_id = 12 [json_name = "traceId"];
    string user_id = 13 [json_name = "userId"];
    string client_id = 14 [json_name = "clientId"];
}


// --- #/components/messages/{message_name} ---

// path: #/components/messages/allocationComplete
message AllocationCompleteMessage {
    AllocationComplete payload = 1;
}

// path: #/components/messages/dsClaimed
message DsClaimedMessage {
    DsClaimed payload = 1;
}

// path: #/components/messages/dsCount
message DsCountMessage {
    DsCount payload = 1;
}

// path: #/components/messages/dsStatusChanged
message DsStatusChangedMessage {
    DsStatusChanged payload = 1;
}

// path: #/components/messages/sessionEnded
message SessionEndedMessage {
    SessionEnded payload = 1;
}


// --- #/channels/{channel_name}/{operation_type}/message ---

// path: #/channels/dsmcontroller/publish/message
message DsmcontrollerPublish {
    oneof payload {
        AllocationCompleteMessage variant0 = 1;
        DsClaimedMessage variant1 = 2;
        DsCountMessage variant2 = 3;
        DsStatusChangedMessage variant3 = 4;
        SessionEndedMessage variant4 = 5;
    }
}


// --- service ---


// Publishes a AllocationComplete to the Dsmcontroller channel. (oneOf variant) (dsmcontroller AllocationComplete)
service DsmcontrollerAllocationCompleteService {
    rpc OnMessage(AllocationComplete) returns (google.protobuf.Empty);
}

// Publishes a DsClaimed to the Dsmcontroller channel. (oneOf variant) (dsmcontroller DsClaimed)
service DsmcontrollerDsClaimedService {
    rpc OnMessage(DsClaimed) returns (google.protobuf.Empty);
}

// Publishes a DsCount to the Dsmcontroller channel. (oneOf variant) (dsmcontroller DsCount)
service DsmcontrollerDsCountService {
    rpc OnMessage(DsCount) returns (google.protobuf.Empty);
}

// Publishes a DsStatusChanged to the Dsmcontroller channel. (oneOf variant) (dsmcontroller DsStatusChanged)
service DsmcontrollerDsStatusChangedService {
    rpc OnMessage(DsStatusChanged) returns (google.protobuf.Empty);
}

// Publishes a SessionEnded to the Dsmcontroller channel. (oneOf variant) (dsmcontroller SessionEnded)
service DsmcontrollerSessionEndedService {
    rpc OnMessage(SessionEnded) returns (google.protobuf.Empty);
}