// Copyright (c) 2025 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// source: Ecommerce/AsyncAPI/fulfillment.yml (0.0.1)

syntax = "proto3";

package accelbyte.ecommerce.fulfillment.v1;
// Version v1.0.0

// --- imports ---

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

// --- options ---

option csharp_namespace = "AccelByte.Ecommerce.Fulfillment";
option go_package = "accelbyte.net/ecommerce/fulfillment";
option java_multiple_files = true;
option java_package = "net.accelbyte.ecommerce.fulfillment";

// --- schema objects ---

// path: #/components/schemas/event
message Event {
    string id = 1 [json_name = "id"];
    int64 version = 2 [json_name = "version"];
    string name = 3 [json_name = "name"];
    string namespace = 4 [json_name = "namespace"];
    string parent_namespace = 5 [json_name = "parentNamespace"];
    string timestamp = 6 [json_name = "timestamp"];
    string client_id = 7 [json_name = "clientId"];
    string user_id = 8 [json_name = "userId"];
    string trace_id = 9 [json_name = "traceId"];
    string session_id = 10 [json_name = "sessionId"];
}

// path: #/components/schemas/fulfillmentError
message FulfillmentError {
    int32 http_status = 1 [json_name = "httpStatus"];
    int32 code = 2 [json_name = "code"];
    string message = 3 [json_name = "message"];
}

// path: #/components/schemas/entitlementSummary
message EntitlementSummary {
    string id = 1 [json_name = "id"];
    string namespace = 2 [json_name = "namespace"];
    string user_id = 3 [json_name = "userId"];
    string clazz = 4 [json_name = "clazz"]; // Allowed values: APP, ENTITLEMENT, CODE, SUBSCRIPTION, MEDIA, OPTIONBOX, LOOTBOX
    string type = 5 [json_name = "type"]; // Allowed values: DURABLE, CONSUMABLE
    bool stackable = 6 [json_name = "stackable"];
    int32 stacked_use_count = 7 [json_name = "stackedUseCount"];
    string store_id = 8 [json_name = "storeId"];
    string item_id = 9 [json_name = "itemId"];
    string granted_code = 10 [json_name = "grantedCode"];
    string created_at = 11 [json_name = "createdAt"];
    string updated_at = 12 [json_name = "updatedAt"];
    string start_date = 13 [json_name = "startDate"];
    string end_date = 14 [json_name = "endDate"];
}

// path: #/components/schemas/creditSummary
message CreditSummary {
    string wallet_id = 1 [json_name = "walletId"];
    string namespace = 2 [json_name = "namespace"];
    string user_id = 3 [json_name = "userId"];
    int64 amount = 4 [json_name = "amount"];
}

// path: #/components/schemas/fulfillmentItem
message FulfillmentItem {
    string item_id = 1 [json_name = "itemId"];
    string item_name = 2 [json_name = "itemName"];
    int32 quantity = 3 [json_name = "quantity"];
    string store_id = 4 [json_name = "storeId"];
    string item_sku = 5 [json_name = "itemSku"];
    int32 extra_subscription_days = 6 [json_name = "extraSubscriptionDays"];
    string item_type = 7 [json_name = "itemType"];
}

// path: #/components/schemas/fulfillment
message Fulfillment {
    string user_id = 1 [json_name = "userId"];
    string order_no = 2 [json_name = "orderNo"];
    string code = 3 [json_name = "code"];
    string source = 4 [json_name = "source"]; // Allowed values: PURCHASE, IAP, PROMOTION, ACHIEVEMENT, REFERRAL_BONUS, REDEEM_CODE, REWARD, GIFT, DLC, OTHER
    repeated FulfillmentItem fulfill_items = 5 [json_name = "fulfillItems"];
    repeated string granted_item_ids = 6 [json_name = "grantedItemIds"];
    repeated EntitlementSummary entitlement_summaries = 7 [json_name = "entitlementSummaries"];
    repeated CreditSummary credit_summaries = 8 [json_name = "creditSummaries"];
    string status = 9 [json_name = "status"];
    FulfillmentError fulfillment_error = 10 [json_name = "fulfillmentError"];
    google.protobuf.Struct metadata = 11 [json_name = "metadata"];
}

// path: #/components/schemas/fulfillmentCompletedPayload
message AnonymousSchema1 { // Message name is kept for backward compatibility
    Fulfillment fulfillment = 1 [json_name = "fulfillment"];
}

// path: #/components/messages/fulfillmentCompleted/payload
message FulfillmentCompleted {
    AnonymousSchema1 payload = 1 [json_name = "payload"];

    // allOf(#/components/schemas/event)
    string id = 2 [json_name = "id"];
    int64 version = 3 [json_name = "version"];
    string name = 4 [json_name = "name"];
    string namespace = 5 [json_name = "namespace"];
    string parent_namespace = 6 [json_name = "parentNamespace"];
    string timestamp = 7 [json_name = "timestamp"];
    string client_id = 8 [json_name = "clientId"];
    string user_id = 9 [json_name = "userId"];
    string trace_id = 10 [json_name = "traceId"];
    string session_id = 11 [json_name = "sessionId"];
}


// --- #/components/messages/{message_name} ---

// path: #/components/messages/fulfillmentCompleted
message FulfillmentCompletedMessage {
    FulfillmentCompleted payload = 1;
}


// --- #/channels/{channel_name}/{operation_type}/message ---


// --- service ---


// Publishes a message to the Fulfillment channel. (fulfillment FulfillmentCompleted)
service FulfillmentFulfillmentCompletedService {
    rpc OnMessage(FulfillmentCompleted) returns (google.protobuf.Empty);
}