// Copyright (c) 2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// source: SessionBrowser/AsyncAPI/sessionbrowser.yaml (0.1.0)

syntax = "proto3";

package accelbyte.session_browser.sessionbrowser.v1;
// Version v1.0.0

// --- imports ---

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

// --- options ---

option csharp_namespace = "AccelByte.SessionBrowser.Sessionbrowser";
option go_package = "accelbyte.net/sessionBrowser/sessionbrowser";
option java_multiple_files = true;
option java_package = "net.accelbyte.sessionBrowser.sessionbrowser";

// --- schema objects ---

// path: #/components/schemas/event
message Event {
    string id = 1 [json_name = "id"];
    int64 version = 2 [json_name = "version"];
    string name = 3 [json_name = "name"];
    string namespace = 4 [json_name = "namespace"];
    string parent_namespace = 5 [json_name = "parentNamespace"];
    string timestamp = 6 [json_name = "timestamp"];
    string client_id = 7 [json_name = "clientId"];
    string user_id = 8 [json_name = "userId"];
    string trace_id = 9 [json_name = "traceId"];
    string session_id = 10 [json_name = "sessionId"];
}

// path: #/components/schemas/gamePayload
message GamePayload {
    int64 matchmaking = 1 [json_name = "matchmaking"];
    int64 custom_game = 2 [json_name = "customGame"];
    int64 p2p = 3 [json_name = "p2p"];
}

// path: #/components/messages/gameSessionMetricUpdated/payload
message GameSessionMetricUpdated {

    // allOf(#/components/schemas/event)
    string id = 1 [json_name = "id"];
    int64 version = 2 [json_name = "version"];
    string name = 3 [json_name = "name"];
    string namespace = 4 [json_name = "namespace"];
    string parent_namespace = 5 [json_name = "parentNamespace"];
    string timestamp = 6 [json_name = "timestamp"];
    string client_id = 7 [json_name = "clientId"];
    string user_id = 8 [json_name = "userId"];
    string trace_id = 9 [json_name = "traceId"];
    string session_id = 10 [json_name = "sessionId"];
}


// --- #/components/messages/{message_name} ---

// path: #/components/messages/gameSessionMetricUpdated
message GameSessionMetricUpdatedMessage {
    GameSessionMetricUpdated payload = 1;
}


// --- #/channels/{channel_name}/{operation_type}/message ---


// --- service ---


// Publishes a message to the Session Browser channel. (sessionBrowser GameSessionMetricUpdated)
service SessionBrowserGameSessionMetricUpdatedService {
    rpc OnMessage(GameSessionMetricUpdated) returns (google.protobuf.Empty);
}